{"version":3,"file":"js/report-089c3762465162410b18.js","mappings":"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","sources":["webpack://togo_var/./app/frontend/assets/stanza.json","webpack://togo_var/webpack/bootstrap","webpack://togo_var/./app/frontend/packs/report/index.ts"],"sourcesContent":["module.exports = {\"variant\":{\"id\":\"tgv_id\",\"base_options\":{\"sparqlist\":\"$TOGOVAR_STANZA_SPARQLIST\"},\"stanza\":[{\"id\":\"variant-header\",\"targetSelector\":\"#variant-header\",\"options\":{\"togostanza-menu-placement\":\"none\"}},{\"id\":\"variant-summary\",\"targetSelector\":\"#variant-summary\"},{\"id\":\"variant-other-overlapping-variants\",\"targetSelector\":\"#variant-other-overlapping-variants\",\"options\":{\"assembly\":\"$TOGOVAR_FRONTEND_REFERENCE\"}},{\"id\":\"variant-frequency\",\"targetSelector\":\"#variant-frequency\",\"options\":{\"assembly\":\"$TOGOVAR_FRONTEND_REFERENCE\",\"data-url\":\"$TOGOVAR_FRONTEND_API_URL\",\"no_data_message\":\"No data\"}},{\"id\":\"variant-mgend\",\"targetSelector\":\"#variant-mgend\",\"options\":{\"data-url\":\"${TOGOVAR_FRONTEND_API_URL}/api/search/variant\"}},{\"id\":\"variant-clinvar\",\"targetSelector\":\"#variant-clinvar\"},{\"id\":\"pagination-table\",\"targetSelector\":\"#variant-gwas\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/pagination-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/variant_gwas?tgv_id=${tgv_id}\",\"data-type\":\"json\",\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"padding\":0,\"page-size-option\":\"5,10,20,50,100\",\"page-slider\":false,\"data-unavailable_message\":\"No data\",\"columns\":[{\"id\":\"variant_and_risk_allele\",\"label\":\"rs# and risk allele\",\"link\":\"rs_uri\",\"line-clamp\":3},{\"id\":\"raf\",\"label\":\"RAF\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"p_value\",\"label\":\"P-value\",\"sprintf\":\"%-9.0e\",\"line-clamp\":3},{\"id\":\"odds_ratio\",\"label\":\"OR\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"ci_text\",\"label\":\"CI\",\"line-clamp\":3},{\"id\":\"beta\",\"label\":\"Beta\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"beta_unit\",\"label\":\"Beta unit\",\"line-clamp\":3},{\"id\":\"mapped_trait\",\"label\":\"Trait(s)\",\"escape\":false,\"line-clamp\":3},{\"id\":\"pubmed_id\",\"label\":\"PubMed ID\",\"link\":\"pubmed_uri\",\"line-clamp\":3},{\"id\":\"study_detail\",\"label\":\"Study accession\",\"link\":\"study\",\"line-clamp\":3},{\"id\":\"initial_sample_size\",\"label\":\"Discovery sample description\",\"line-clamp\":3},{\"id\":\"replication_sample_size\",\"label\":\"Replication sample description\",\"line-clamp\":3}]}},{\"id\":\"variant-genomic-context\",\"targetSelector\":\"#variant-genomic-context\",\"options\":{\"assembly\":\"$TOGOVAR_FRONTEND_REFERENCE\",\"jbrowse\":\"$TOGOVAR_STANZA_JBROWSE\",\"margin\":50}},{\"id\":\"variant-gene\",\"targetSelector\":\"#variant-gene\"},{\"id\":\"variant-transcript\",\"targetSelector\":\"#variant-transcript\"},{\"id\":\"variant-publication\",\"targetSelector\":\"#variant-publication\"}]},\"gene\":{\"id\":\"hgnc_id\",\"base_options\":{\"sparqlist\":\"$TOGOVAR_STANZA_SPARQLIST\"},\"stanza\":[{\"id\":\"gene-header\",\"targetSelector\":\"#gene-header\",\"options\":{\"togostanza-menu-placement\":\"none\"}},{\"id\":\"gene-summary\",\"targetSelector\":\"#gene-summary\"},{\"id\":\"gene-mgend\",\"targetSelector\":\"#gene-mgend\",\"options\":{\"term\":\"${hgnc_id}\",\"data-url\":\"${TOGOVAR_FRONTEND_API_URL}/api/search/variant\"}},{\"id\":\"pagination-table\",\"targetSelector\":\"#gene-clinvar\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/pagination-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/gene_clinvar?hgnc_id=${hgnc_id}\",\"data-type\":\"json\",\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"padding\":0,\"page-size-option\":\"5,10,20,50,100\",\"page-slider\":false,\"data-unavailable_message\":\"No data\",\"columns\":[{\"id\":\"tgv_id\",\"label\":\"TogoVar ID\",\"link\":\"tgv_link\",\"line-clamp\":3},{\"id\":\"rs_id\",\"label\":\"rs#\",\"link\":\"rs_id_link\",\"line-clamp\":3},{\"id\":\"position\",\"label\":\"Position\",\"line-clamp\":3},{\"id\":\"title\",\"label\":\"Title\",\"link\":\"clinvar\",\"line-clamp\":3},{\"id\":\"interpretation\",\"label\":\"Clinical significance\",\"escape\":false,\"line-clamp\":3},{\"id\":\"review_status\",\"label\":\"Review status\",\"escape\":false,\"line-clamp\":3},{\"id\":\"last_evaluated\",\"label\":\"Last evaluated\",\"line-clamp\":3},{\"id\":\"condition\",\"label\":\"Condition(s)\",\"link\":\"medgen\",\"line-clamp\":3}]}},{\"id\":\"pagination-table\",\"targetSelector\":\"#gene-gwas\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/pagination-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/gene_gwas?hgnc_id=${hgnc_id}\",\"data-type\":\"json\",\"padding\":0,\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"page-size-option\":\"5,10,20,50,100\",\"page-slider\":false,\"data-unavailable_message\":\"No data\",\"columns\":[{\"id\":\"tgv_id\",\"label\":\"TogoVar ID\",\"link\":\"tgv_link\",\"line-clamp\":3},{\"id\":\"variant_and_risk_allele\",\"label\":\"rs# and risk allele\",\"link\":\"rs_uri\",\"line-clamp\":3},{\"id\":\"position\",\"label\":\"Position\",\"escape\":false,\"line-clamp\":3},{\"id\":\"ref_alt\",\"label\":\"Ref/Alt\",\"escape\":false,\"line-clamp\":3},{\"id\":\"alt_freq\",\"label\":\"Alt freq. of GEM-J WGA\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"raf\",\"label\":\"RAF\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"p_value\",\"label\":\"P-value\",\"sprintf\":\"%-9.0e\",\"line-clamp\":3},{\"id\":\"odds_ratio\",\"label\":\"OR\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"ci_text\",\"label\":\"CI\",\"line-clamp\":3},{\"id\":\"beta\",\"label\":\"Beta\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"beta_unit\",\"label\":\"Beta unit\",\"line-clamp\":3},{\"id\":\"mapped_trait\",\"label\":\"Trait(s)\",\"escape\":false,\"line-clamp\":3},{\"id\":\"pubmed_id\",\"label\":\"PubMed ID\",\"link\":\"pubmed_uri\",\"line-clamp\":3},{\"id\":\"study_detail\",\"label\":\"Study accession\",\"link\":\"study\",\"line-clamp\":3},{\"id\":\"initial_sample_size\",\"label\":\"Discovery sample description\",\"line-clamp\":3},{\"id\":\"replication_sample_size\",\"label\":\"Replication sample description\",\"line-clamp\":3}]}},{\"id\":\"pagination-table\",\"targetSelector\":\"#gene-mogplus\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/pagination-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/gene_mogplus?hgnc_id=${hgnc_id}\",\"data-type\":\"json\",\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"padding\":0,\"page-size-option\":\"5,10,20,50,100\",\"page-slider\":false,\"data-unavailable_message\":\"No data\",\"columns\":[{\"id\":\"allele_grcm39\",\"label\":\"Link to MoG+\",\"link\":\"mogplus_url\"},{\"id\":\"mouse_strains\",\"link\":\"mogplus_table\",\"label\":\"Mouse strains\",\"escape\":false,\"line-clamp\":1},{\"id\":\"alt_match\",\"label\":\"ALT match\"},{\"id\":\"tgv_id\",\"link\":\"tgv_link\",\"label\":\"TogoVar ID\"},{\"id\":\"rs\",\"link\":\"rs_link\",\"label\":\"rs#\"},{\"id\":\"allele_grch38\",\"label\":\"Chr-pos-ref-alt\"},{\"id\":\"consequence\",\"label\":\"Consequence\",\"line-clamp\":1,\"escape\":false},{\"id\":\"clinsig\",\"label\":\"Clinical significance\",\"line-clamp\":1,\"escape\":false},{\"id\":\"condition\",\"label\":\"Condition\",\"line-clamp\":1,\"escape\":false}]}},{\"id\":\"gene-genomic-context\",\"targetSelector\":\"#gene-genomic-context\",\"options\":{\"assembly\":\"$TOGOVAR_FRONTEND_REFERENCE\",\"jbrowse\":\"$TOGOVAR_STANZA_JBROWSE\",\"margin\":200}},{\"id\":\"gene-protein-browser\",\"targetSelector\":\"#gene-protein-browser\",\"options\":{\"hgnc_id\":\"${hgnc_id}\",\"togovar_target\":\"stg-grch38\",\"jpost_endpoint\":\"https://db-dev.jpostdb.org/proxy/sparql\",\"glycosmos_endpoint\":\"https://ts.glycosmos.org/sparql\"}},{\"id\":\"gene-protein-structure\",\"targetSelector\":\"#gene-protein-structure\",\"options\":{\"molmil\":\"${TOGOVAR_FRONTEND_API_URL}/molmil/\"}},{\"id\":\"scroll-table\",\"targetSelector\":\"#gene-variant\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/scroll-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/gene_variant?hgnc_id=${hgnc_id}\",\"data-type\":\"json\",\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"height\":500,\"page-size\":100,\"columns\":[{\"id\":\"id\",\"label\":\"TogoVar ID\",\"escape\":false},{\"id\":\"dbsnp\",\"label\":\"RefSNP ID\",\"escape\":false},{\"id\":\"position\",\"label\":\"Position\",\"escape\":false},{\"id\":\"ref_alt\",\"label\":\"Ref / Alt\",\"escape\":false},{\"id\":\"type\",\"label\":\"Type\",\"escape\":false},{\"id\":\"symbols\",\"label\":\"Gene\",\"escape\":false},{\"id\":\"frequencies\",\"label\":\"Alt frequency\",\"escape\":false},{\"id\":\"consequence\",\"label\":\"Consequence\",\"escape\":false},{\"id\":\"sift\",\"label\":\"SIFT\",\"escape\":false},{\"id\":\"polyphen\",\"label\":\"PolyPhen\",\"escape\":false},{\"id\":\"significance\",\"label\":\"Clinical significance\",\"escape\":false}]}},{\"id\":\"gene-publication\",\"targetSelector\":\"#gene-publication\"}]},\"disease\":{\"id\":\"medgen_cid\",\"base_options\":{\"sparqlist\":\"$TOGOVAR_STANZA_SPARQLIST\"},\"stanza\":[{\"id\":\"disease-header\",\"targetSelector\":\"#disease-header\",\"options\":{\"togostanza-menu-placement\":\"none\"}},{\"id\":\"hash-table\",\"targetSelector\":\"#disease-summary\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/hash-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/disease_summary?medgen_cid=${medgen_cid}\",\"data-type\":\"json\",\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"padding\":0,\"columns\":[{\"id\":\"label\",\"label\":\"Title\"},{\"id\":\"definition\",\"label\":\"Definition\"},{\"id\":\"links\",\"label\":\"Links\",\"escape\":false}]}},{\"id\":\"disease-mgend\",\"targetSelector\":\"#disease-mgend\",\"options\":{\"term\":\"${medgen_cid}\",\"data-url\":\"${TOGOVAR_FRONTEND_API_URL}/api/search/variant\"}},{\"id\":\"pagination-table\",\"targetSelector\":\"#disease-clinvar\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/pagination-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/disease_clinvar?medgen_cid=${medgen_cid}\",\"data-type\":\"json\",\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"padding\":0,\"page-size-option\":\"5,10,20,50,100\",\"page-slider\":false,\"data-unavailable_message\":\"No data\",\"columns\":[{\"id\":\"tgv_id\",\"label\":\"TogoVar ID\",\"link\":\"tgv_link\",\"line-clamp\":3},{\"id\":\"rs_id\",\"label\":\"rs#\",\"link\":\"rs_id_link\",\"line-clamp\":3},{\"id\":\"position\",\"label\":\"Position\",\"escape\":false,\"line-clamp\":3},{\"id\":\"title\",\"label\":\"Title\",\"link\":\"clinvar\",\"line-clamp\":3},{\"id\":\"interpretation\",\"label\":\"Clinical significance\",\"escape\":false,\"line-clamp\":3},{\"id\":\"review_status\",\"label\":\"Review status\",\"escape\":false,\"line-clamp\":3},{\"id\":\"last_evaluated\",\"label\":\"Last evaluated\",\"line-clamp\":3}]}},{\"id\":\"pagination-table\",\"targetSelector\":\"#disease-gwas\",\"scriptUrl\":\"https://togostanza.github.io/metastanza/pagination-table.js\",\"options\":{\"data-url\":\"${TOGOVAR_STANZA_SPARQLIST}/api/disease_gwas?medgen_cid=${medgen_cid}\",\"data-type\":\"json\",\"custom-css-url\":\"https://togostanza.github.io/togostanza-themes/contrib/togovar.css?20220803\",\"padding\":0,\"page-size-option\":\"5,10,20,50,100\",\"page-slider\":false,\"data-unavailable_message\":\"No data\",\"columns\":[{\"id\":\"variant_and_risk_allele\",\"label\":\"rs# and risk allele\",\"escape\":false,\"line-clamp\":3},{\"id\":\"raf\",\"label\":\"RAF\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"p_value\",\"label\":\"P-value\",\"sprintf\":\"%-9.0e\",\"line-clamp\":3},{\"id\":\"odds_ratio\",\"label\":\"OR\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"ci_text\",\"label\":\"CI\",\"line-clamp\":3},{\"id\":\"beta\",\"label\":\"Beta\",\"sprintf\":\"%-9.3e\",\"line-clamp\":3},{\"id\":\"beta_unit\",\"label\":\"Beta unit\",\"line-clamp\":3},{\"id\":\"mapped_trait\",\"label\":\"Trait(s)\",\"escape\":false,\"line-clamp\":3},{\"id\":\"pubmed_id\",\"label\":\"PubMed ID\",\"link\":\"pubmed_uri\",\"line-clamp\":3},{\"id\":\"study_detail\",\"label\":\"Study accession\",\"link\":\"study\",\"line-clamp\":3},{\"id\":\"initial_sample_size\",\"label\":\"Discovery sample description\",\"line-clamp\":3},{\"id\":\"replication_sample_size\",\"label\":\"Replication sample description\",\"line-clamp\":3}]}}]}}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This module provides a comprehensive system for rendering TogoVar report pages\n * with interactive stanza components. It handles configuration processing,\n * environment variable resolution, DOM manipulation, and stanza lifecycle management.\n *\n * ## Architecture Overview\n *\n * The application is built around several key classes:\n *\n * - **ConfigProcessor**: Processes JSON configuration and resolves environment variables\n * - **OptionFormatter**: Formats stanza options for HTML attribute assignment\n * - **StanzaManager**: Manages stanza creation, validation, and DOM insertion\n * - **ReportApp**: Orchestrates the entire report rendering process\n * - **DOMReadyHandler**: Handles application bootstrap and DOM ready detection\n *\n * ## Usage\n *\n * The application automatically initializes when the DOM is ready:\n *\n * ```typescript\n * // Automatic initialization - no manual setup required\n * // 1. Parses current URL route (e.g., /variant/tgv123456)\n * // 2. Loads configuration for the report type\n * // 3. Renders all configured stanza components\n * ```\n *\n * ## Stanza Components\n *\n * Stanzas are reusable web components that render specific data visualizations.\n * Each stanza is defined in the YAML configuration with:\n *\n * - **id**: Unique identifier for the stanza type\n * - **targetSelector**: CSS selector for the target DOM element\n * - **scriptUrl**: Optional custom JavaScript source URL\n * - **options**: Configuration parameters passed to the stanza\n *\n * ## Environment Variables\n *\n * The system supports template variables in configuration:\n *\n * - `$TOGOVAR_FRONTEND_API_URL` - Base API endpoint (e.g., https://grch37.togovar.org)\n * - `$TOGOVAR_FRONTEND_REFERENCE` - Reference genome assembly (GRCh37/GRCh38)\n * - `$TOGOVAR_STANZA_SPARQLIST` - SPARQLiST endpoint for predefined queries\n * - `$TOGOVAR_STANZA_JBROWSE` - JBrowse genomic browser endpoint\n * - `$TOGOVAR_ENDPOINT_SPARQL` - SPARQL endpoint for semantic queries\n * - `$TOGOVAR_ENDPOINT_SEARCH` - Search endpoint for variant searches\n * - `$TOGOVAR_FRONTEND_STANZA_URL` - Custom stanza JavaScript source URL\n *\n */\n\n// ============================================================================\n// Type Declarations\n// ============================================================================\n\n/** Global environment variables injected at build time */\ndeclare const TOGOVAR_FRONTEND_API_URL: string | undefined;\ndeclare const TOGOVAR_FRONTEND_REFERENCE: string | undefined;\ndeclare const TOGOVAR_ENDPOINT_SPARQL: string | undefined;\ndeclare const TOGOVAR_ENDPOINT_SPARQLIST: string | undefined;\ndeclare const TOGOVAR_ENDPOINT_SEARCH: string | undefined;\ndeclare const TOGOVAR_ENDPOINT_JBROWSE: string | undefined;\ndeclare const TOGOVAR_FRONTEND_STANZA_URL: string | undefined;\n\n// ============================================================================\n// Interface Definitions\n// ============================================================================\n\n/**\n * Environment configuration interface defining all endpoint URLs and settings\n * used by the stanza components.\n */\ninterface EnvironmentConfig {\n  readonly TOGOVAR_FRONTEND_API_URL: string; // Base API URL for TogoVar services\n  readonly TOGOVAR_FRONTEND_REFERENCE: string; // Reference genome assembly (GRCh37/GRCh38)\n  readonly TOGOVAR_STANZA_SPARQL: string; // SPARQL endpoint URL for semantic queries\n  readonly TOGOVAR_STANZA_SPARQLIST: string; // SPARQLiST endpoint URL for predefined queries\n  readonly TOGOVAR_STANZA_SEARCH: string; // Search endpoint URL for variant searches\n  readonly TOGOVAR_STANZA_JBROWSE: string; // JBrowse genomic browser endpoint URL\n}\n\n/**\n * Configuration for a single stanza component, defining its behavior and placement.\n */\ninterface StanzaConfig {\n  id: string; // Unique identifier for the stanza component\n  targetSelector: string; // CSS selector for the DOM element where the stanza will be rendered\n  scriptUrl?: string; // Optional custom source URL for the stanza JavaScript file\n  options?: Record<string, unknown>; // Optional configuration options passed to the stanza component\n}\n\n/**\n * Report page configuration containing all stanzas and base options for a specific report type.\n */\ninterface ReportConfig {\n  base_options?: Record<string, unknown>; // Base options applied to all stanzas in this report\n  stanza?: StanzaConfig[]; // Array of stanza configurations to render on this report page\n  id?: string; // Key name for the report identifier (default: 'id')\n}\n\n/**\n * Route parsing result containing report type and identifier.\n */\ninterface RouteInfo {\n  reportType: string; // Type of report (variant, gene, disease, etc.)\n  reportId: string; // Unique identifier for the specific report item\n}\n\n// ============================================================================\n// Constants and Configuration\n// ============================================================================\n\n/**\n * Environment configuration with fallback values for all required endpoints.\n * These values are populated from global variables injected at build time.\n */\nconst ENV_CONFIG: EnvironmentConfig = {\n  TOGOVAR_FRONTEND_API_URL:\n    TOGOVAR_FRONTEND_API_URL || 'https://grch37.togovar.org',\n  TOGOVAR_FRONTEND_REFERENCE: TOGOVAR_FRONTEND_REFERENCE || 'GRCh37',\n  TOGOVAR_STANZA_SPARQL: TOGOVAR_ENDPOINT_SPARQL || '/sparql',\n  TOGOVAR_STANZA_SPARQLIST: TOGOVAR_ENDPOINT_SPARQLIST || '/sparqlist',\n  TOGOVAR_STANZA_SEARCH: TOGOVAR_ENDPOINT_SEARCH || '/search',\n  TOGOVAR_STANZA_JBROWSE: TOGOVAR_ENDPOINT_JBROWSE || '/jbrowse',\n};\n\n/** Default base URL for stanza component JavaScript files */\nconst DEFAULT_STANZA_PATH: string = 'https://togovar.github.io/stanza';\n\n/** Actual stanza path with override capability */\nconst STANZA_PATH: string = TOGOVAR_FRONTEND_STANZA_URL || DEFAULT_STANZA_PATH;\n\n// ============================================================================\n// Configuration Processing\n// ============================================================================\n\n/**\n * Processes JSON configuration by recursively replacing environment variables\n * with their actual values from ENV_CONFIG.\n *\n * Supports both `$VAR_NAME` and `${VAR_NAME}` syntax for environment variable references.\n */\nclass ConfigProcessor {\n  /**\n   * Recursively processes a configuration object, replacing environment variables.\n   *\n   * @param configObject - Raw configuration object from JSON file\n   * @returns Processed configuration with environment variables resolved\n   *\n   * @example\n   * ```typescript\n   * const rawConfig = { url: \"$TOGOVAR_FRONTEND_API_URL/api\" };\n   * const processed = ConfigProcessor.processConfig(rawConfig);\n   * // Result: { url: \"https://grch37.togovar.org/api\" }\n   * ```\n   */\n  static processConfig(configObject: unknown): unknown {\n    const processItemRecursively = (item: unknown): unknown => {\n      if (typeof item === 'string' && item.includes('$')) {\n        return this._replaceEnvironmentVariables(item);\n      }\n\n      if (Array.isArray(item)) {\n        return item.map(processItemRecursively);\n      }\n\n      if (item && typeof item === 'object') {\n        const processedResult: Record<string, unknown> = {};\n        for (const [key, value] of Object.entries(item)) {\n          processedResult[key] = processItemRecursively(value);\n        }\n        return processedResult;\n      }\n\n      return item;\n    };\n\n    return processItemRecursively(configObject);\n  }\n\n  /**\n   * Replaces environment variable placeholders in a string with actual values.\n   *\n   * @param templateString - String containing environment variable references\n   * @returns String with variables replaced by their values\n   *\n   * @example\n   * ```typescript\n   * const result = ConfigProcessor._replaceEnvironmentVariables(\"$TOGOVAR_FRONTEND_API_URL/api\");\n   * // Returns: \"https://grch37.togovar.org/api\"\n   * ```\n   */\n  private static _replaceEnvironmentVariables(templateString: string): string {\n    const environmentVariablePattern = /(\\$([A-Z_]+)|\\${([A-Z_]+)})/g;\n    return templateString.replace(\n      environmentVariablePattern,\n      (\n        match: string,\n        _: string,\n        variableKey1?: string,\n        variableKey2?: string\n      ): string => {\n        const variableKey = variableKey1 || variableKey2;\n        return variableKey\n          ? ENV_CONFIG[variableKey as keyof EnvironmentConfig] || ''\n          : '';\n      }\n    );\n  }\n}\n\n/** Processed configuration loaded from JSON with environment variables resolved */\nconst REPORT_CONFIG = ConfigProcessor.processConfig(\n  require('../../assets/stanza.json')\n) as Record<string, ReportConfig>;\n\n// ============================================================================\n// Option Formatting\n// ============================================================================\n\n/**\n * Formats and normalizes stanza options for HTML attribute assignment.\n * Handles object serialization, URL formatting, and type conversion.\n */\nclass OptionFormatter {\n  /**\n   * Converts stanza options to a string-based record suitable for HTML attributes.\n   *\n   * @param options - Raw stanza options from configuration\n   * @returns String-based record ready for HTML attribute assignment\n   *\n   * @example\n   * ```typescript\n   * const options = { count: 10, url: \"https://example.com?a=1&b=2\", data: { key: \"value\" } };\n   * const formatted = OptionFormatter.format(options);\n   * // Result: { count: \"10\", url: \"https://example.com?a=1&b=2\", data: '{\"key\":\"value\"}' }\n   * ```\n   */\n  static format(\n    options: Record<string, unknown> | undefined\n  ): Record<string, string> {\n    if (!options) return {};\n\n    const formattedAttributes: Record<string, string> = {};\n\n    for (const [attributeName, attributeValue] of Object.entries(options)) {\n      if (attributeValue && typeof attributeValue === 'object') {\n        // Serialize objects to JSON strings\n        formattedAttributes[attributeName] = JSON.stringify(attributeValue);\n      } else if (this._isUrl(attributeValue)) {\n        // Format URLs with proper encoding\n        formattedAttributes[attributeName] = this._formatUrl(\n          attributeValue as string\n        );\n      } else {\n        // Convert all other values to strings\n        formattedAttributes[attributeName] = String(attributeValue);\n      }\n    }\n\n    return formattedAttributes;\n  }\n\n  /**\n   * Type guard to check if a value is a URL string.\n   *\n   * @param value - Value to check\n   * @returns True if value is a URL string starting with http/https\n   */\n  private static _isUrl(value: unknown): value is string {\n    return typeof value === 'string' && /^https?:\\/\\//.test(value);\n  }\n\n  /**\n   * Formats a URL string with proper parameter encoding.\n   *\n   * @param urlString - URL string to format\n   * @returns Properly formatted URL with encoded parameters\n   *\n   * @example\n   * ```typescript\n   * const formatted = OptionFormatter._formatUrl(\"https://example.com?name=John Doe&age=30\");\n   * // Returns: \"https://example.com?name=John%20Doe&age=30\"\n   * ```\n   */\n  private static _formatUrl(urlString: string): string {\n    const url = new URL(urlString);\n\n    // Rebuild search params with proper encoding\n    url.search = [...url.searchParams]\n      .filter(([, value]) => value) // Remove empty parameters\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&');\n\n    return url.href;\n  }\n}\n\n// ============================================================================\n// Stanza Management\n// ============================================================================\n\n/**\n * Manages the creation, validation, and DOM insertion of stanza components.\n *\n * Stanzas are reusable web components that render specific data visualizations\n * or interactive elements. This class handles their lifecycle from script loading\n * to DOM element creation and attribute assignment.\n */\nclass StanzaManager {\n  /**\n   * Creates and appends a stanza component to the DOM.\n   *\n   * This is the main entry point for stanza creation. It validates the configuration,\n   * loads the required JavaScript module, creates the custom element, and inserts\n   * it into the target DOM location.\n   *\n   * @param stanzaConfig - Configuration defining the stanza behavior\n   * @param baseOptions - Base options applied to all stanzas\n   *\n   * @example\n   * ```typescript\n   * const config = {\n   *   id: \"variant-summary\",\n   *   targetSelector: \"#variant-summary\",\n   *   options: { assembly: \"GRCh38\" }\n   * };\n   * StanzaManager.createStanzaAndInsertIntoDOM(config, { sparqlist: \"/sparqlist\" });\n   * ```\n   */\n  static createStanzaAndInsertIntoDOM(\n    stanzaConfig: StanzaConfig,\n    baseOptions: Record<string, unknown> = {}\n  ): void {\n    const { id, targetSelector, scriptUrl, options } = stanzaConfig;\n\n    if (!this._validateStanzaConfig(stanzaConfig)) {\n      console.error('Invalid stanza config:', stanzaConfig);\n      return;\n    }\n\n    this._loadStanzaScript(scriptUrl || `${STANZA_PATH}/${id}.js`);\n    this._createAndInsertStanzaElement(\n      id,\n      targetSelector,\n      baseOptions,\n      options\n    );\n  }\n\n  /**\n   * Validates that a stanza configuration contains all required properties.\n   *\n   * @param config - Stanza configuration to validate\n   * @returns True if configuration is valid, false otherwise\n   */\n  private static _validateStanzaConfig({\n    id,\n    targetSelector,\n  }: StanzaConfig): boolean {\n    if (!id) {\n      console.error(\"Missing required stanza property: 'id'\");\n      return false;\n    }\n\n    if (!targetSelector) {\n      console.error(\"Missing required stanza property: 'targetSelector'\");\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Dynamically loads a stanza JavaScript module by creating a script element.\n   *\n   * @param scriptSourceUrl - URL of the stanza JavaScript file\n   */\n  private static _loadStanzaScript(scriptSourceUrl: string): void {\n    const scriptElement = document.createElement('script');\n    scriptElement.type = 'module';\n    scriptElement.src = scriptSourceUrl;\n    scriptElement.async = true;\n    document.head.appendChild(scriptElement);\n  }\n\n  /**\n   * Creates a stanza custom element and inserts it into the target DOM location.\n   *\n   * @param stanzaId - Stanza identifier used to create the custom element name\n   * @param targetSelector - CSS selector for the target DOM element\n   * @param baseOptions - Base options applied to all stanzas\n   * @param stanzaOptions - Specific options for this stanza instance\n   */\n  private static _createAndInsertStanzaElement(\n    stanzaId: string,\n    targetSelector: string,\n    baseOptions: Record<string, unknown>,\n    stanzaOptions?: Record<string, unknown>\n  ): void {\n    // Create the custom element with standardized naming convention\n    const stanzaElement = document.createElement(`togostanza-${stanzaId}`);\n\n    // Apply all options as HTML attributes\n    this._applyAttributesToElement(\n      stanzaElement,\n      this._convertObjectToStringRecord(baseOptions)\n    );\n    this._applyAttributesToElement(\n      stanzaElement,\n      OptionFormatter.format(stanzaOptions)\n    );\n\n    // Find target element and insert stanza\n    const targetElement = document.querySelector(targetSelector);\n\n    if (targetElement) {\n      targetElement.appendChild(stanzaElement);\n    } else {\n      console.warn(\n        `Target element not found for stanza '${stanzaId}': ${targetSelector}`\n      );\n    }\n  }\n\n  /**\n   * Converts an object with unknown value types to string-only record.\n   *\n   * @param objectToConvert - Object to convert\n   * @returns Record with all values converted to strings\n   */\n  private static _convertObjectToStringRecord(\n    objectToConvert: Record<string, unknown>\n  ): Record<string, string> {\n    const stringRecord: Record<string, string> = {};\n    for (const [key, value] of Object.entries(objectToConvert)) {\n      stringRecord[key] = String(value);\n    }\n    return stringRecord;\n  }\n\n  /**\n   * Applies a set of attributes to a DOM element.\n   *\n   * @param element - Target DOM element\n   * @param attributes - Key-value pairs to set as HTML attributes\n   */\n  private static _applyAttributesToElement(\n    element: Element,\n    attributes: Record<string, string>\n  ): void {\n    if (!attributes) return;\n\n    for (const [key, value] of Object.entries(attributes)) {\n      element.setAttribute(key, value);\n    }\n  }\n}\n\n// ============================================================================\n// Report Application\n// ============================================================================\n\n/**\n * Main application class responsible for initializing and managing TogoVar report pages.\n *\n * This class orchestrates the entire report rendering process:\n * 1. Parses the current page route to determine report type and ID\n * 2. Loads the appropriate configuration for the report type\n * 3. Prepares base options and processes stanza configurations\n * 4. Updates page elements and renders all stanzas\n */\nclass ReportApp {\n  /**\n   * Initializes the report application and renders all configured stanzas.\n   *\n   * This is the main entry point that coordinates the entire report rendering process.\n   * It handles error cases gracefully and provides detailed logging for debugging.\n   */\n  static initialize(): void {\n    const routeInfo = this._parseCurrentRoute();\n    const reportConfig = this._getReportConfig(routeInfo.reportType);\n\n    if (!reportConfig) {\n      console.error(\n        `No configuration found for report type: ${routeInfo.reportType}`\n      );\n      return;\n    }\n\n    const baseOptions = this._prepareBaseOptions(\n      reportConfig,\n      routeInfo.reportId\n    );\n\n    this._updatePageElements(routeInfo.reportId);\n    this._renderAllStanzas(\n      reportConfig.stanza || [],\n      baseOptions,\n      routeInfo.reportId,\n      reportConfig.id\n    );\n  }\n\n  /**\n   * Parses the current URL to extract report type and identifier.\n   *\n   * Expects URLs in the format: `/[report-type]/[report-id]`\n   * Examples: `/variant/tgv123456`, `/gene/BRCA1`, `/disease/C0006142`\n   *\n   * @returns Object containing parsed route information\n   *\n   * @example\n   * ```typescript\n   * // URL: https://example.com/variant/tgv123456\n   * const route = ReportApp._parseCurrentRoute();\n   * // Returns: { reportType: \"variant\", reportId: \"tgv123456\" }\n   * ```\n   */\n  private static _parseCurrentRoute(): RouteInfo {\n    const pathSegments = window.location.pathname.split('/').slice(-2);\n    return {\n      reportType: pathSegments[0],\n      reportId: pathSegments[1],\n    };\n  }\n\n  /**\n   * Retrieves the configuration for a specific report type.\n   *\n   * @param reportType - Type of report (variant, gene, disease, etc.)\n   * @returns Report configuration or undefined if not found\n   */\n  private static _getReportConfig(\n    reportType: string\n  ): ReportConfig | undefined {\n    return REPORT_CONFIG[reportType];\n  }\n\n  /**\n   * Prepares base options that will be applied to all stanzas in the report.\n   *\n   * Base options include common configuration like endpoints and the report ID\n   * mapped to the appropriate key name (configurable per report type).\n   *\n   * @param reportConfig - Configuration for the current report type\n   * @param reportId - Identifier for the specific report item\n   * @returns Base options object ready for stanza application\n   *\n   * @example\n   * ```typescript\n   * const config = { base_options: { sparqlist: \"/api\" }, id: \"tgv_id\" };\n   * const options = ReportApp._prepareBaseOptions(config, \"tgv123456\");\n   * // Returns: { sparqlist: \"/api\", tgv_id: \"tgv123456\" }\n   * ```\n   */\n  private static _prepareBaseOptions(\n    reportConfig: ReportConfig,\n    reportId: string\n  ): Record<string, unknown> {\n    const baseOptions = reportConfig.base_options\n      ? { ...reportConfig.base_options }\n      : {};\n\n    // Add the report ID using the configured key name (default: 'id')\n    const idKey = reportConfig.id || 'id';\n    baseOptions[idKey] = reportId;\n\n    return baseOptions;\n  }\n\n  /**\n   * Updates all page elements that should display the report ID.\n   *\n   * Searches for elements with the CSS class 'report_id' and updates their\n   * text content to show the current report identifier.\n   *\n   * @param reportId - Identifier to display in page elements\n   */\n  private static _updatePageElements(reportId: string): void {\n    const reportIdElements = document.querySelectorAll('.report_id');\n    reportIdElements.forEach((element) => {\n      element.textContent = reportId;\n    });\n  }\n\n  /**\n   * Processes and renders all stanzas configured for this report type.\n   *\n   * For each stanza configuration:\n   * 1. Processes any template variables in the options\n   * 2. Creates and inserts the stanza element via StanzaManager\n   *\n   * @param stanzas - Array of stanza configurations to render\n   * @param baseOptions - Base options applied to all stanzas\n   * @param reportId - Report identifier for template variable replacement\n   * @param idKey - Key name for the report ID in template variables\n   */\n  private static _renderAllStanzas(\n    stanzas: StanzaConfig[],\n    baseOptions: Record<string, unknown>,\n    reportId: string,\n    idKey: string = 'id'\n  ): void {\n    stanzas.forEach((stanza) => {\n      const processedStanza = this._processStanzaTemplateVariables(\n        stanza,\n        reportId,\n        idKey\n      );\n      StanzaManager.createStanzaAndInsertIntoDOM(processedStanza, baseOptions);\n    });\n  }\n\n  /**\n   * Processes template variables in stanza options, replacing placeholders with actual values.\n   *\n   * Supports template syntax like `${report_id}` or `$report_id` where the variable\n   * name matches the configured ID key for the report type.\n   *\n   * @param stanzaConfig - Original stanza configuration\n   * @param reportId - Value to substitute for template variables\n   * @param idKeyName - Variable name to look for in templates\n   * @returns Stanza configuration with template variables resolved\n   *\n   * @example\n   * ```typescript\n   * const stanza = {\n   *   id: \"variant-summary\",\n   *   targetSelector: \"#summary\",\n   *   options: { url: \"/api/variant/${tgv_id}\" }\n   * };\n   * const processed = ReportApp._processStanzaTemplateVariables(stanza, \"tgv123456\", \"tgv_id\");\n   * // Result: { ...stanza, options: { url: \"/api/variant/tgv123456\" } }\n   * ```\n   */\n  private static _processStanzaTemplateVariables(\n    stanzaConfig: StanzaConfig,\n    reportId: string,\n    idKeyName: string\n  ): StanzaConfig {\n    if (!stanzaConfig.options) {\n      return stanzaConfig;\n    }\n\n    const processedStanzaConfig: StanzaConfig = { ...stanzaConfig };\n    processedStanzaConfig.options = { ...stanzaConfig.options };\n\n    // Process each option value for template variables\n    for (const [optionKey, optionValue] of Object.entries(\n      processedStanzaConfig.options\n    )) {\n      if (typeof optionValue === 'string' && optionValue.includes('$')) {\n        // Replace both ${var} and $var syntax\n        const templateVariablePattern = new RegExp(\n          `\\\\$(${idKeyName}|{${idKeyName}})`,\n          'g'\n        );\n        processedStanzaConfig.options[optionKey] = optionValue.replace(\n          templateVariablePattern,\n          reportId\n        );\n      }\n    }\n\n    return processedStanzaConfig;\n  }\n}\n\n// ============================================================================\n// Application Bootstrap\n// ============================================================================\n\n/**\n * Handles DOM ready state detection and application initialization.\n *\n * Ensures the report application only starts after the DOM is fully loaded,\n * supporting both scenarios where the script loads before or after DOM completion.\n */\nclass DOMReadyHandler {\n  /**\n   * Initializes the report application when the DOM is ready.\n   */\n  static initialize(): void {\n    if (document.readyState === 'loading') {\n      // DOM is still loading, wait for it to complete\n      document.addEventListener('DOMContentLoaded', () => {\n        ReportApp.initialize();\n      });\n    } else {\n      // DOM is already loaded, start immediately\n      ReportApp.initialize();\n    }\n  }\n}\n\n// ============================================================================\n// Application Entry Point\n// ============================================================================\n\n/**\n * Start the TogoVar report application.\n *\n * This begins the initialization process that will:\n * 1. Wait for DOM ready state\n * 2. Parse the current route\n * 3. Load report configuration\n * 4. Render all configured stanzas\n */\nDOMReadyHandler.initialize();\n"],"names":["module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","ENV_CONFIG","TOGOVAR_FRONTEND_API_URL","TOGOVAR_FRONTEND_REFERENCE","TOGOVAR_STANZA_SPARQL","TOGOVAR_STANZA_SPARQLIST","TOGOVAR_STANZA_SEARCH","TOGOVAR_STANZA_JBROWSE","REPORT_CONFIG","processConfig","configObject","processItemRecursively","item","includes","this","_replaceEnvironmentVariables","Array","isArray","map","processedResult","key","value","Object","entries","templateString","replace","match","_","variableKey1","variableKey2","variableKey","OptionFormatter","format","options","formattedAttributes","attributeName","attributeValue","JSON","stringify","_isUrl","_formatUrl","String","test","urlString","url","URL","search","searchParams","filter","encodeURIComponent","join","href","StanzaManager","createStanzaAndInsertIntoDOM","stanzaConfig","baseOptions","id","targetSelector","scriptUrl","_validateStanzaConfig","_loadStanzaScript","_createAndInsertStanzaElement","console","error","scriptSourceUrl","scriptElement","document","createElement","type","src","async","head","appendChild","stanzaId","stanzaOptions","stanzaElement","_applyAttributesToElement","_convertObjectToStringRecord","targetElement","querySelector","warn","objectToConvert","stringRecord","element","attributes","setAttribute","ReportApp","initialize","routeInfo","_parseCurrentRoute","reportConfig","_getReportConfig","reportType","_prepareBaseOptions","reportId","_updatePageElements","_renderAllStanzas","stanza","pathSegments","window","location","pathname","split","slice","base_options","querySelectorAll","forEach","textContent","stanzas","idKey","processedStanza","_processStanzaTemplateVariables","idKeyName","processedStanzaConfig","optionKey","optionValue","templateVariablePattern","RegExp","readyState","addEventListener"],"sourceRoot":""}